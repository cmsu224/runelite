//// Source code recreated from a .class file by IntelliJ IDEA// (powered by FernFlower decompiler)//package net.runelite.client.plugins.cerberus;import net.runelite.client.config.Config;import net.runelite.client.config.ConfigGroup;import net.runelite.client.config.ConfigItem;import net.runelite.client.config.ConfigTitleSection;import net.runelite.client.config.Range;import net.runelite.client.ui.overlay.components.ComponentOrientation;@ConfigGroup("cerberus")public interface CerberusConfig extends Config {    @ConfigTitleSection(            name = "General",            description = "",            position = 0,            keyName = "generalSection"    )    default boolean generalSection() {        return false;    }    @ConfigTitleSection(            name = "Current Attack",            description = "",            position = 1,            keyName = "currentAttackSection"    )    default boolean currentAttackSection() {        return false;    }    @ConfigTitleSection(            name = "Upcoming Attacks",            description = "",            position = 2,            keyName = "upcomingAttacksSection"    )    default boolean upcomingAttacksSection() {        return false;    }    @ConfigTitleSection(            name = "Guitar Hero Mode",            description = "",            position = 3,            keyName = "guitarHeroSection"    )    default boolean guitarHeroSection() {        return false;    }    @ConfigItem(            keyName = "drawGhostTiles",            name = "Show ghost tiles",            description = "Overlay ghost tiles with respective colors and attack timers.",            position = 0,            titleSection = "generalSection"    )    default boolean drawGhostTiles() {        return false;    }    @ConfigItem(            keyName = "calculateAutoAttackPrayer",            name = "Calculate auto attack prayer",            description = "Calculate prayer for auto attacks based on your equipment defensive bonuses.<br>Default is Protect from Magic.",            position = 2,            titleSection = "generalSection"    )    default boolean calculateAutoAttackPrayer() {        return false;    }    @ConfigItem(            keyName = "showCurrentAttack",            name = "Show current attack",            description = "Overlay the current attack in a separate infobox.",            position = 0,            titleSection = "currentAttackSection"    )    default boolean showCurrentAttack() {        return false;    }    @ConfigItem(            keyName = "showCurrentAttackTimer",            name = "Show current attack timer",            description = "Display a timer on the current attack infobox.",            position = 1,            titleSection = "currentAttackSection",            hidden = true,            unhide = "showCurrentAttack"    )    default boolean showCurrentAttackTimer() {        return false;    }    @ConfigItem(            keyName = "showUpcomingAttacks",            name = "Show upcoming attacks",            description = "Overlay upcoming attacks in stacked info boxes.",            position = 0,            titleSection = "upcomingAttacksSection"    )    default boolean showUpcomingAttacks() {        return false;    }    @Range(            min = 1,            max = 10    )    @ConfigItem(            keyName = "amountOfAttacksShown",            name = "# of attacks",            description = "Number of upcoming attacks to render.",            position = 1,            titleSection = "upcomingAttacksSection",            hidden = true,            unhide = "showUpcomingAttacks"    )    default int amountOfAttacksShown() {        return 4;    }    @ConfigItem(            keyName = "reverseUpcomingAttacks",            name = "Reverse order",            description = "Reverse the order of the upcoming attacks.",            position = 2,            titleSection = "upcomingAttacksSection",            hidden = true,            unhide = "showUpcomingAttacks"    )    default boolean reverseUpcomingAttacks() {        return false;    }    @ConfigItem(            keyName = "showUpcomingAttackNumber",            name = "Show attack number",            description = "Display the attack pattern number on each upcoming attack.<br>See http://pastebin.com/hWCvantS",            position = 3,            titleSection = "upcomingAttacksSection",            hidden = true,            unhide = "showUpcomingAttacks"    )    default boolean showUpcomingAttackNumber() {        return false;    }    @ConfigItem(            keyName = "upcomingAttacksOrientation",            name = "Upcoming attacks orientation",            description = "Display upcoming attacks vertically or horizontally.",            position = 4,            titleSection = "upcomingAttacksSection",            hidden = true,            unhide = "showUpcomingAttacks",            enumClass = CerberusConfig.InfoBoxOrientation.class    )    default CerberusConfig.InfoBoxOrientation upcomingAttacksOrientation() {        return CerberusConfig.InfoBoxOrientation.VERTICAL;    }    @ConfigItem(            keyName = "infoBoxComponentSize",            name = "Info box size",            description = "Size of the upcoming attacks infoboxes.",            position = 5,            titleSection = "upcomingAttacksSection",            hidden = true,            unhide = "showUpcomingAttacks",            enumClass = CerberusConfig.InfoBoxComponentSize.class    )    default CerberusConfig.InfoBoxComponentSize infoBoxComponentSize() {        return CerberusConfig.InfoBoxComponentSize.SMALL;    }    @ConfigItem(            keyName = "guitarHeroMode",            name = "Guitar Hero mode",            description = "Display descending boxes indicating the correct prayer for the current attack.",            position = 0,            titleSection = "guitarHeroSection"    )    default boolean guitarHeroMode() {        return false;    }    @Range(            min = 1,            max = 10    )    @ConfigItem(            keyName = "guitarHeroTicks",            name = "# of ticks",            description = "The number of ticks, before the upcoming current attack, to render.",            position = 1,            titleSection = "guitarHeroSection",            hidden = true,            unhide = "guitarHeroMode"    )    default int guitarHeroTicks() {        return 4;    }    @ConfigItem(            name = "Enable mirror mode",            keyName = "mirrorMode",            description = "Enable mirror mode overlay rendering.",            position = 99    )    default boolean mirrorMode() {        return false;    }    public static enum InfoBoxComponentSize {        SMALL("Small boxes", 40),        MEDIUM("Medium boxes", 60),        LARGE("Large boxes", 80);        private final String name;        private final int size;        public String toString() {            return this.name;        }        public String getName() {            return this.name;        }        public int getSize() {            return this.size;        }        private InfoBoxComponentSize(String name, int size) {            this.name = name;            this.size = size;        }    }    public static enum InfoBoxOrientation {        HORIZONTAL("Horizontal layout", ComponentOrientation.HORIZONTAL),        VERTICAL("Vertical layout", ComponentOrientation.VERTICAL);        private final String name;        private final ComponentOrientation orientation;        public String toString() {            return this.name;        }        public String getName() {            return this.name;        }        public ComponentOrientation getOrientation() {            return this.orientation;        }        private InfoBoxOrientation(String name, ComponentOrientation orientation) {            this.name = name;            this.orientation = orientation;        }    }}